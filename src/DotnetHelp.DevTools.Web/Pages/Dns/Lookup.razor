@page "/dns/lookup"
@using DotnetHelp.DevTools.Shared
@inject ApiHttpClient Http
@implements IAsyncDisposable

<PageTitle>Dns Lookup</PageTitle>

<DnhHeader Title="Dns"
		   SubTitle="Dns Lookup"
		   Details=@(new List<string> {
		   $"Lookup Dns records for a given domain"
		   }) />

<DnhSection>
	<DnhForm OnSubmit="OnSubmit" Text="Lookup">
		<DnhTextBox Label="Domain" @bind-Value="_request" @ref="_focusElement" />
	</DnhForm>
</DnhSection>

@if (_loading)
{
	<DnhLoading />
}
else if (_response is not null)
{
	<DnhSection Title="Result">
		<DnhResult>
			<DnhTitle>@_response.Domain</DnhTitle>
			@foreach (var item in _response.Responses)
			{
				<ul>
					<li class="mb-1">
						<DnhKvp Name="@item.Type" Value="@item.Address" />
					</li>
				</ul>
			}
		</DnhResult>
	</DnhSection>
}


@code {
	private DnhTextBox? _focusElement;
	private bool _loading = false;
	private string? _request;
	private DnsLookupResponses? _response;
	private readonly CancellationTokenSource _disposalTokenSource = new();

	public async ValueTask DisposeAsync()
	{
		await _disposalTokenSource.CancelAsync();
	}

	private async Task OnSubmit()
	{
		_response = null;
		if (!string.IsNullOrWhiteSpace(_request))
		{
			_loading = true;
			_response = await Http.DnsLookup(_request, _disposalTokenSource.Token);
			_request = "";
			_loading = false;
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && _focusElement is not null)
		{
			await _focusElement.Element.FocusAsync();
		}
	}
}