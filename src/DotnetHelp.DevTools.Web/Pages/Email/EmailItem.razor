<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
	<div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div>

	<div class="relative mb-3 flex pt-2 bg-slate-800 shadow-lg ">
		<div class="@((_view == View.Overview ? "flex-none text-sky-300 border-t border-b border-t-transparent border-b-sky-300 px-4 py-1 flex items-center" : "flex-none text-300 border-t border-b border-t-transparent border-b-300 px-4 py-1 flex items-center"))">
			<button @onclick="() => OnChangeView(View.Overview)">Overview</button>
		</div>
		<div class="@((_view == View.Headers ? "flex-none text-sky-300 border-t border-b border-t-transparent border-b-sky-300 px-4 py-1 flex items-center" : "flex-none text-300 border-t border-b border-t-transparent border-b-300 px-4 py-1 flex items-center"))">
			<button @onclick="() => OnChangeView(View.Headers)">Headers</button>
		</div>
		<div class="@((_view == View.Content ? "flex-none text-sky-300 border-t border-b border-t-transparent border-b-sky-300 px-4 py-1 flex items-center" : "flex-none text-300 border-t border-b border-t-transparent border-b-300 px-4 py-1 flex items-center"))">
			<button @onclick="() => OnChangeView(View.Content)">Content</button>
		</div>
	</div>

	<div class="relative rounded-xl overflow-auto p-8 pt-2">

		<div>

			@if (_view == View.Overview)
			{
				<p>
					<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">
						From :
					</span>
					<span>@string.Join(",", Model.From.Select(x => $"<{x.Name}> {x.Address}"))</span>
				</p>

				<p>
					<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">
						Subject :
					</span>
					<span>@Model.Subject</span>
				</p>

				<p>
					<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">
						Timestamp :
					</span>
					<span>@Model.Created.ToString("yyyy-MM-dd HH:mm:ss")</span>
				</p>

				<p class="text-xl mt-3">Content</p>
				<pre class="body">@Model.Content.FirstOrDefault(x => x.Type == "text/plain")?.Content</pre>
			}

			@if (_view == View.Headers)
			{
				@foreach (var header in Model.Headers)
				{
					<ul>
						<li>
							<span>
								<span class="text-sm text-sky-500 whitespace-nowrap dark:text-sky-400">@header.Name : </span>
								<span class="text-wrap break-all text-sm">@header.Value</span>
							</span>
						</li>
					</ul>
				}
			}

			@if (_view == View.Content)
			{
				@foreach (var content in Model.Content)
				{
					<p class="text-xl text-sky-500 mb-2">@content.Type</p>
					<pre class="text-wrap mb-4">@content.Content</pre>
				}
			}

		</div>
	</div>
	<div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
</div>

@code {
	[Parameter]
	public required IncomingEmail Model { get; set; }

	private View _view = View.Overview;

	private void OnChangeView(View view)
	{
		_view = view;
	}

	private enum View
	{
		Overview,
		Headers,
		Content
	}
}