<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
	<div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div>

	@if (OnDelete.HasDelegate)
	{
		<div class="absolute right-0 z-20">
			<button class="p-2 text-slate-700 dark:text-slate-400 hover:text-slate-800 dark:hover:text-slate-300 cursor-pointer" @onclick="OnDelete">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
					 stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
						  d="M6 18L18 6M6 6l12 12" />
				</svg>
			</button>
		</div>
	}

	<div class="relative mb-3 flex pt-2 bg-slate-800 shadow-lg ">
		<div class="@((_view == View.Overview ? "flex-none text-sky-300 border-t border-b border-t-transparent border-b-sky-300 px-4 py-1 flex items-center" : "flex-none text-300 border-t border-b border-t-transparent border-b-300 px-4 py-1 flex items-center"))">
			<button @onclick="() => OnChangeView(View.Overview)">Overview</button>
		</div>
		<div class="@((_view == View.Headers ? "flex-none text-sky-300 border-t border-b border-t-transparent border-b-sky-300 px-4 py-1 flex items-center" : "flex-none text-300 border-t border-b border-t-transparent border-b-300 px-4 py-1 flex items-center"))">
			<button @onclick="() => OnChangeView(View.Headers)">Headers</button>
		</div>
		<div class="@((_view == View.Content ? "flex-none text-sky-300 border-t border-b border-t-transparent border-b-sky-300 px-4 py-1 flex items-center" : "flex-none text-300 border-t border-b border-t-transparent border-b-300 px-4 py-1 flex items-center"))">
			<button @onclick="() => OnChangeView(View.Content)">Content</button>
		</div>
	</div>

	<div class="relative rounded-xl overflow-auto p-8 pt-2">

		<div>

			@if (_view == View.Overview)
			{
				<DnhKvp Name="From" Value="@string.Join(",", Model.From.Select(x => $"<{x.Name}> {x.Address}"))" />
				<DnhKvp Name="Subject" Value="@Model.Subject" />
				<DnhKvp Name="Timestamp" Value="@Model.Created.ToString("yyyy-MM-dd HH:mm:ss")" />

				<DnhTitle>Content</DnhTitle>
				<pre class="text-wrap break-all">@Model.Content.FirstOrDefault(x => x.Type == "text/plain")?.Content</pre>
			}

			@if (_view == View.Headers)
			{
				<DnhKvpCollection Items="Model.Headers.Select(x => new KeyValuePair<string, string>(x.Name, x.Value)).ToList()" />
			}

			@if (_view == View.Content)
			{
				@foreach (var content in Model.Content)
				{
					<DnhTitle>@content.Type</DnhTitle>
					<pre class="text-wrap break-all mb-4">@content.Content</pre>
				}
			}

		</div>
	</div>
	<div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
</div>

@code {
	[Parameter]
	public required IncomingEmail Model { get; set; }

	[Parameter]
	public EventCallback OnDelete { get; set; }

	private View _view = View.Overview;

	private void OnChangeView(View view)
	{
		_view = view;
	}

	private enum View
	{
		Overview,
		Headers,
		Content
	}
}