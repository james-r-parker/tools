@page "/hashing"
@using DotnetHelp.DevTools.Shared
@inject ApiHttpClient Http
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Hash</PageTitle>

<DnhHeader Title="Hashing"
		   SubTitle="Collection of hashing algorithms"
		   Details=@(new List<string> {
		   $"Convert a string to a hashed version of the string."
		   }) />

<DnhSection>
	<DnhForm OnSubmit="OnSubmit" Text="Hash">
		<DnhSelect Label="Encoding" @bind-Value="_encoding">
			<option>UTF8</option>
			<option>UNICODE</option>
			<option>UTF32</option>
			<option>ASCII</option>
		</DnhSelect>

		<DnhSelect Label="Algorithm" @bind-Value="_algorithm">
			<option>MD5</option>
			<option>SHA1</option>
			<option>SHA256</option>
			<option>SHA384</option>
			<option>SHA512</option>
			<option>HMACSHA256</option>
			<option>HMACSHA512</option>
		</DnhSelect>

		<DnhSelect Label="Output Format" @bind-Value="_format">
			<option>BASE64</option>
			<option>HEX</option>
			<option>UTF8</option>
		</DnhSelect>

		<DnhTextArea Label="Message" @bind-Value="_message" />
		<DnhTextBox Label="Secret" @bind-Value="_secret" />
	</DnhForm>
</DnhSection>

@if (_loading)
{
	<DnhLoading />
}
else if (_response is not null)
{
	<DnhSection Title="Result">
		<DnhResult OnCopy="OnCopy">
			<p>@_response.Response</p>
		</DnhResult>
	</DnhSection>
}

@code {
	private bool _loading = false;
	private string _encoding = "UTF8";
	private string _algorithm = "SHA256";
	private string _format = "HEX";
	private string _message = "";
	private string _secret = "";
	private TextApiResponse? _response;
	readonly CancellationTokenSource _disposalTokenSource = new();

	protected override Task OnInitializedAsync()
	{
		return Task.CompletedTask;
	}

	public async ValueTask DisposeAsync()
	{
		await _disposalTokenSource.CancelAsync();
	}

	private async Task OnCopy()
	{
		if (_response is not null)
		{
			await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _response.Response);
		}
	}

	private async Task OnSubmit()
	{
		_response = null;
		if (!string.IsNullOrWhiteSpace(_message))
		{
			_loading = true;
			var request = new HashApiRequest(_algorithm, _message, _encoding, _format, _secret);
			_response = await Http.Hash(request, _disposalTokenSource.Token);
			_loading = false;
			StateHasChanged();
		}
	}
}