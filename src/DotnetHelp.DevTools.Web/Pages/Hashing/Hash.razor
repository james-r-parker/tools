@page "/hashing"
@using DotnetHelp.DevTools.Shared
@inject ApiHttpClient Http
@implements IAsyncDisposable

<PageTitle>Hash</PageTitle>

<PageHeader Title="Hashing"
			SubTitle="Collection of hashing algorithms"
			Details=@(new List<string> {
			$"Convert a string to a hashed version of the string."
			}) />

<section class="mb-8 relative">

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Encoding</span>
		<InputSelect @bind-Value="_encoding" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text.">
			<option>UTF8</option>
			<option>UNICODE</option>
			<option>UTF32</option>
			<option>ASCII</option>
		</InputSelect>
	</label>

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Algorithm</span>
		<InputSelect @bind-Value="_algorithm" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text.">
			<option>MD5</option>
			<option>SHA1</option>
			<option>SHA256</option>
			<option>SHA384</option>
			<option>SHA512</option>
			<option>HMACSHA256</option>
			<option>HMACSHA512</option>
		</InputSelect>
	</label>

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Output Format</span>
		<InputSelect @bind-Value="_format" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text.">
			<option>BASE64</option>
			<option>HEX</option>
			<option>UTF8</option>
		</InputSelect>
	</label>

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Message</span>
		<InputText @bind-Value="_message" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text."></InputText>
	</label>

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Salt</span>
		<InputText @bind-Value="_salt" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text."></InputText>
	</label>

	<div class="flex justify-end">
		<div>
			<button @onclick="OnClick" type="button" class="bg-sky-500 hover:bg-sky-700 px-5 py-2 text-sm leading-5 rounded-full font-semibold text-white">
				Hash
			</button>
		</div>
	</div>


</section>

@if (_response is not null)
{
	<section class="mb-8 relative">

		<span class="block text-gray-700 dark:text-gray-400 mb-2">Result</span>

		<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
			<div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div><div class="relative rounded-xl overflow-auto p-8">
				<div class="space-y-8">
					<div>
						<div class="text-sm font-medium text-slate-900 dark:text-slate-200">
							<p>@_response?.Response</p>
						</div>
					</div>
				</div>
			</div><div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
		</div>

	</section>
}


@code {
	private string _encoding = "UTF8";
	private string _algorithm = "SHA256";
	private string _format = "HEX";
	private string _message = "";
	private string _salt = "";
	private TextApiResponse? _response;
	readonly CancellationTokenSource _disposalTokenSource = new();

	protected override Task OnInitializedAsync()
	{
		return Task.CompletedTask;
	}

	public async ValueTask DisposeAsync()
	{
		await _disposalTokenSource.CancelAsync();
	}

	private async Task OnClick()
	{
		if (!string.IsNullOrWhiteSpace(_message))
		{
			var request = new HashApiRequest(_encoding, _algorithm, _format, _message, _salt);
			_response = await Http.Hash(request, _disposalTokenSource.Token);
			StateHasChanged();
		}
	}
}