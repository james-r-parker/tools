@page "/http/bin"
@inject ApiHttpClient ApiClient
@inject IWebSocket Wss
@inject IStateManagement State
@inject IOptions<ApplicationOptions> Settings
@implements IAsyncDisposable

<DnhHeader 
	Title="Http" 
	SubTitle="Receive HTTP requests"
	Details=@(new List<string> { 
		$"EndPoint: {Settings.Value.BaseAddress}/api/http/{_bucket}", 
		$"State: {Wss.State}" 
	})
/>

@if (_loading)
{
	<DnhLoading />
}
else if (_requests.Count == 0)
{
	<DnhEmpty />
}
else
{
	@foreach (BucketHttpRequest request in _requests.OrderByDescending(x => x.Created))
	{
		<section class="mb-2">
			<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
				<div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div><div class="relative rounded-xl overflow-auto p-8">
					<div class="space-y-8">
						<div>
							<div class="max-w-prose">

								<p>
									<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">Timestamp : </span>
									<span>@request.Created.ToString("yyyy-MM-dd HH:mm:ss")</span>
								</p>

								<p>
									<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">IP : </span>
									<span>@request.IpAddress</span>
								</p>

								<p class="text-xl mt-3">Headers</p>
								@foreach (var header in request.Headers)
								{
									<ul>
										<li>
											<span>
												<span class="text-sm text-sky-500 whitespace-nowrap dark:text-sky-400">@header.Key : </span>
												<span class="text-wrap break-all text-sm">@header.Value</span>
											</span>
										</li>
									</ul>
								}

								@if (request.Query.Count > 0)
								{
									<p class="text-xl mt-3">Query String</p>
									@foreach (var query in request.Query)
									{
										<ul>
											<li>
												<span>
													<span class="text-sm text-sky-500 whitespace-nowrap dark:text-sky-400">@query.Key : </span>
													<span class="text-wrap break-all text-sm">@query.Value</span>
												</span>
											</li>
										</ul>
									}
								}

								@if (request.Body is not null)
								{
									<p class="text-xl mt-3">Body</p>
									<pre class="body">@request.Body</pre>
								}
							</div>
						</div>
					</div>
				</div><div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
			</div>
		</section>
	}
}

@code {
	string _bucket = string.Empty;
	bool _loading = true;
	readonly CancellationTokenSource _disposalTokenSource = new();
	readonly List<BucketHttpRequest> _requests = new();

	protected override async Task OnInitializedAsync()
	{
		_bucket = await State.GetIdAsync();

		_ = Wss.ConnectAsync(_disposalTokenSource.Token)
		.ContinueWith((c) =>
		{
			Wss.OnMessage += OnMessage;
			StateHasChanged();
		});

		_ = GetList();
	}

	private void OnMessage(object? sender, WebSocketMessage? message)
	{
		if (message?.Action == "HTTP_REQUEST")
		{
			_ = GetList();
		}
	}

	private async Task GetList()
	{
		long from = _requests.Count == 0 ? 0 : _requests.Max(x => x.Created).ToUnixTimeSeconds();
		_requests.AddRange(await ApiClient.GetHttpRequests(_bucket, from, _disposalTokenSource.Token));
		_loading = false;
		StateHasChanged();
	}

	public async ValueTask DisposeAsync()
	{
		Wss.OnMessage -= OnMessage;
		await _disposalTokenSource.CancelAsync();
		await Wss.DisposeAsync();
	}
}