@page "/http/mock"
@inject ApiHttpClient ApiClient
@inject IWebSocket Wss
@inject IStateManagement State
@inject IJSRuntime JSRuntime
@inject IOptions<ApplicationOptions> Settings
@inject ILogger<Mock> Logger
@implements IAsyncDisposable

<DnhHeader Title="Http"
		   SubTitle="Mock Http requests"
		   Details=@(new List<string> {
		   $"Build a collection of Http requests to return a given response to a incoming request",
		   $"State: {Wss.State}"
		   }) />

<DnhSection>
	<DnhForm OnSubmit="OnSubmit" Text="Create">
		<DnhTextBox Label="Name" @bind-Value="_model.Slug" />
		<DnhSelect Label="Method" @bind-Value="_model.Method">
			<option>GET</option>
			<option>HEAD</option>
			<option>POST</option>
			<option>PUT</option>
			<option>DELETE</option>
		</DnhSelect>
		<div class="flex gap-4 items-end">
			<DnhTextBox Label="Key" @bind-Value="_header.Key" />
			<DnhTextBox Label="Value" @bind-Value="_header.Value" />
			<div>
				<DnhButton OnClick="OnAddHeader">
					Add
				</DnhButton>
			</div>
		</div>
		@if (_model.Headers.Count > 0)
		{
			<div class="divide-y divide-slate-700">
				@foreach (var header in _model.Headers)
				{
					<div class="flex py-2 items-center">
						<div class="flex-grow">
							<DnhKvp Name="@header.Key" Value="@header.Value" />
						</div>
						<DnhButton OnClick="() => OnRemoveHeader(header.Key)">
							Remove
						</DnhButton>
					</div>
				}
			</div>
		}
		<DnhTextArea Label="Body" @bind-Value="_model.Body" />
	</DnhForm>
</DnhSection>

@if (_loading)
{
	<DnhLoading />
}
else if (_mocks.Count == 0)
{
	<DnhEmpty />
}
else
{
	<DnhSection>
		<DnhResult>
			<DnhTable>
				<DnhTableHeader>
					<DnhTableHeaderCell>Name</DnhTableHeaderCell>
					<DnhTableHeaderCell>Method</DnhTableHeaderCell>
					<DnhTableHeaderCell>Executions</DnhTableHeaderCell>
					<DnhTableHeaderCell>Last Executed</DnhTableHeaderCell>
					<DnhTableHeaderCell>Created</DnhTableHeaderCell>
					<th></th>
				</DnhTableHeader>
				<DnhTableBody>
					@foreach (HttpMockOverview mock in _mocks.OrderByDescending(x => x.Created))
					{
						<tr>
							<DnhTableCell>@mock.Name</DnhTableCell>
							<DnhTableCell>@mock.Method</DnhTableCell>
							<DnhTableCell>@mock.Executions</DnhTableCell>
							<DnhTableCell>
								<DnhTimeSince Date="@mock.LastExecuted" />
							</DnhTableCell>
							<DnhTableCell>
								<DnhTimeSince Date="@mock.Created" />
							</DnhTableCell>
							<DnhTableCell>
								<div class="flex gap-2 items-center">
									<div>
										<DnhButtonCopy Confirm="false" OnCopy="() => OnCopy(mock)" />
									</div>
									<div class="pt-2">
										<DnhButtonCross OnClick="() => OnDelete(mock)" />
									</div>
								</div>

							</DnhTableCell>
						</tr>
					}
				</DnhTableBody>
			</DnhTable>
		</DnhResult>

	</DnhSection>
}

@code {
	private string _bucket = string.Empty;
	private bool _loading = true;
	private Model _model = new();
	private (string Key, string Value) _header = new("", "");
	private readonly CancellationTokenSource _disposalTokenSource = new();
	private readonly List<HttpMockOverview> _mocks = new();

	protected override async Task OnInitializedAsync()
	{
		_bucket = await State.GetIdAsync(_disposalTokenSource.Token);

		_ = Wss.ConnectAsync(_disposalTokenSource.Token)
			.ContinueWith((c) =>
			{
				Wss.OnMessage += OnMessage;
				StateHasChanged();
			});

		_ = GetList();
	}

	private void OnMessage(object? sender, WebSocketMessage? message)
	{
		if (message?.Action == "HTTP_MOCK" && !string.IsNullOrWhiteSpace(message.Payload))
		{
			var payload = JsonSerializer.Deserialize<HttpMockOverview>(message.Payload);
			if (payload is not null)
			{
				_mocks.RemoveAll(x => x.Name == payload.Name);
				_mocks.Add(payload);
				StateHasChanged();
			}
		}
	}

	private void OnAddHeader()
	{
		if (!string.IsNullOrWhiteSpace(_header.Key) &&
			!string.IsNullOrWhiteSpace(_header.Value))
		{
			_model.Headers.Add(_header.Key, _header.Value);
			_header = new("", "");
		}
	}

	private void OnRemoveHeader(string header)
	{
		_model.Headers.Remove(header);
	}

	private async Task OnSubmit()
	{
		var model = new NewHttpMock(_bucket, _model.Slug, _model.Method, _model.Headers, _model.Body);
		await ApiClient.CreateHttpMock(model, _disposalTokenSource.Token);
		_model = new();
		_ = GetList();
	}

	private async Task GetList()
	{
		long from = _mocks.Count == 0 ? 0 : _mocks.Max(x => x.Created).ToUnixTimeSeconds();
		_mocks.AddRange(await ApiClient.ListHttpMocks(_bucket, from, _disposalTokenSource.Token));
		_loading = false;
		StateHasChanged();
	}

	private Task OnDelete(HttpMockOverview item)
	{
		_mocks.Remove(item);
		_ = ApiClient.DeleteHttpMock(_bucket, item.Created.ToUnixTimeSeconds(), _disposalTokenSource.Token);
		return Task.CompletedTask;
	}

	private async Task OnCopy(HttpMockOverview item)
	{
		await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"{Settings.Value.BaseAddress}/api/mock/execute/{_bucket}/{item.Name}");
	}

	public async ValueTask DisposeAsync()
	{
		Wss.OnMessage -= OnMessage;
		await _disposalTokenSource.CancelAsync();
		await Wss.DisposeAsync();
	}

	class Model()
	{
		public string Slug { get; set; } = "";
		public string Method { get; set; } = "POST";
		public string Body { get; set; } = "";
		public Dictionary<string, string> Headers { get; } = new();
	}

}