@page "/http/send"
@inject ApiHttpClient ApiClient
@implements IAsyncDisposable

<PageHeader Title="Http"
			SubTitle="Send a HTTP request"
			Details=@(new List<string> {
			$"Send a HTTP request and receive the headers and body of the response."
			}) />

<section class="mb-2">

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Url</span>
		<InputText @bind-Value="_url" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text."></InputText>
	</label>

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Url</span>
		<InputSelect @bind-Value="_method" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text.">
			<option>GET</option>
			<option>HEAD</option>
			<option>POST</option>
			<option>PUT</option>
			<option>DELETE</option>
		</InputSelect>
	</label>

	<div class="flex gap-4 items-end mb-4">
		<label>
			<span class="block text-gray-700 dark:text-gray-400 mb-2">Key</span>
			<InputText @bind-Value="_headerKey" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text."></InputText>
		</label>
		<label>
			<span class="block text-gray-700 dark:text-gray-400 mb-2">Value</span>
			<InputText @bind-Value="_headerValue" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text."></InputText>
		</label>
		<div>
			<button @onclick="OnAddHeader" type="button" class="bg-sky-500 hover:bg-sky-700 px-5 py-2 text-sm leading-5 rounded-full font-semibold text-white">
				Add
			</button>
		</div>
	</div>

	@if (_headers.Count > 0)
	{
		<div class="divide-y divide-slate-700">
			@foreach (var header in _headers)
			{
				<div class="flex py-2 items-center">
					<div class="flex-grow">
						<span class="text-sm text-sky-500 whitespace-nowrap dark:text-sky-400">@header.Key : </span>
						<span class="text-wrap break-all text-sm">@header.Value</span>
					</div>
					<button @onclick="() => OnRemoveHeader(header)" type="button" class="inline bg-sky-500 hover:bg-sky-700 px-5 py-2 text-sm rounded-full font-semibold text-white">
						Remove
					</button>
				</div>
			}
		</div>
	}

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Body</span>
		<InputTextArea @bind-Value="_body" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="3" placeholder="Enter some text."></InputTextArea>
	</label>

	<div class="flex justify-end">
		<div>
			<button @onclick="OnClick" type="button" class="bg-sky-500 hover:bg-sky-700 px-5 py-2 text-sm leading-5 rounded-full font-semibold text-white">
				Send
			</button>
		</div>
	</div>

</section>

@if (_loading)
{
	<section class="mb-2">
		<Loading />
	</section>
}
else if (_response is not null)
{
	<section class="mb-2">
		<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
			<div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div><div class="relative rounded-xl overflow-auto p-8">
				<div class="space-y-8">
					<div>
						<p>
							<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">Status : </span>
							<span>@_response.StatusCode</span>
						</p>

						<p class="text-xl mt-3">Headers</p>
						@foreach (var header in _response.Headers)
						{
							<ul>
								<li>
									<span>
										<span class="text-sm text-sky-500 whitespace-nowrap dark:text-sky-400">@header.Key : </span>
										<span class="text-wrap break-all text-sm">@header.Value</span>
									</span>
								</li>
							</ul>
						}

						@if (_response.Body is not null)
						{
							<p class="text-xl mt-3">Body</p>
							<pre class="text-wrap break-all">@_response.Body</pre>
						}
					</div>
				</div>
			</div><div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
		</div>
	</section>
}

@code {
	readonly CancellationTokenSource _disposalTokenSource = new();
	private string _url = "";
	private string _body = "";
	private string _method = "GET";
	private string _headerKey = "";
	private string _headerValue = "";
	private IList<KeyValuePair<string, string>> _headers = new List<KeyValuePair<string, string>>();
	private OutgoingHttpResponse? _response;
	private bool _loading;

	private void OnAddHeader()
	{
		if (string.IsNullOrWhiteSpace(_headerKey) || string.IsNullOrWhiteSpace(_headerValue))
		{
			return;
		}

		_headers.Add(new KeyValuePair<string, string>(_headerKey, _headerValue));
	}

	private void OnRemoveHeader(KeyValuePair<string, string> header)
	{
		_headers.Remove(header);
	}

	private async Task OnClick()
	{
		try
		{
			_loading = true;
			var request = new OutgoingHttpRequest(_url, _method, _headers.ToDictionary(x => x.Key, x => x.Value), _body);
			_response = await ApiClient.SendHttpRequest(request, _disposalTokenSource.Token);
		}
		catch
		{
			_response = null;
		}
		finally
		{
			_loading = false;
		}
	}

	public async ValueTask DisposeAsync()
	{
		await _disposalTokenSource.CancelAsync();
	}
}
