@page "/requests"
@inject ApiHttpClient ApiClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using System.Net.WebSockets
@using System.Text
@implements IDisposable

<h3>Http Requests</h3>
<h3>State: @_webSocket.State</h3>
<h4>Bucket: @_bucket</h4>
@foreach (var message in _messages)
{
    <pre>@message</pre>
}

@code {
    const string Key = "http_request_bucket";
    string _bucket = string.Empty;
    readonly CancellationTokenSource _disposalTokenSource = new();
    readonly ClientWebSocket _webSocket = new();
    readonly ICollection<string> _messages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _bucket = await LocalStorage.GetItemAsync<string>(Key);
        if (string.IsNullOrWhiteSpace(_bucket))
        {
            _bucket = Guid.NewGuid().ToString("N");
            await LocalStorage.SetItemAsync(Key, _bucket);
        }

        await _webSocket.ConnectAsync(new Uri($"wss://wss.dotnethelp.co.uk?bucket={_bucket}"), _disposalTokenSource.Token);
        _ = ReceiveLoop();
    }

    private async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!_disposalTokenSource.IsCancellationRequested)
        {
            var received = await _webSocket.ReceiveAsync(buffer, _disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);
            _messages.Add(receivedAsText);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _disposalTokenSource.Cancel();
        _ = _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

}