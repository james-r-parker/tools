@page "/requests"
@inject ApiHttpClient ApiClient
@inject Websocket Wss
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@implements IAsyncDisposable

<header id="header" class="mb-10 md:flex md:items-start">
	<div class="flex-auto max-w-4xl">
		<p class="mb-4 text-sm leading-6 font-semibold text-sky-500 dark:text-sky-400">
			Http
		</p>
		<h1 class="text-3xl sm:text-4xl font-extrabold text-slate-900 tracking-tight dark:text-slate-200">
			Receive HTTP requests
		</h1>
		<p class="mt-4 text-lg text-slate-700 dark:text-slate-400">
			EndPoint: https://www.dotnethelp.co.uk/api/http/@_bucket
		</p>
		<p class="mt-4 text-lg text-slate-700 dark:text-slate-400">
			State: @Wss.State
		</p>
	</div>
</header>

@if (_loading)
{
	<div class="bg-white dark:bg-slate-800 p-4 ring-1 ring-slate-900/5 rounded-lg shadow-lg max-w-xs w-full h-28">
		<div class="flex space-x-4 animate-pulse">
			<div class="rounded-full bg-slate-200 dark:bg-slate-700 h-10 w-10"></div>
			<div class="flex-1 space-y-6 py-1">
				<div class="h-2 bg-slate-200 dark:bg-slate-700 rounded"></div>
				<div class="space-y-3">
					<div class="grid grid-cols-3 gap-4">
						<div class="h-2 bg-slate-200 dark:bg-slate-700 rounded col-span-2"></div>
						<div class="h-2 bg-slate-200 dark:bg-slate-700 rounded col-span-1"></div>
					</div>
					<div class="h-2 bg-slate-200 dark:bg-slate-700 rounded"></div>
				</div>
			</div>
		</div>
	</div>
}
else if (_requests.Count == 0)
{
	<section class="mb-2">
		<p class="text-xl text-sky-500 dark:text-sky-400">No requests yet...</p>
	</section>
}
else
{
	@foreach (BucketHttpRequest request in _requests.OrderByDescending(x => x.Created))
	{
		<section class="mb-2">
			<HttpRequest Request="@request" />
		</section>
	}
}

@code {
	const string Key = "http_request_bucket";
	string _bucket = string.Empty;
	bool _loading = true;
	readonly CancellationTokenSource _disposalTokenSource = new();
	readonly List<BucketHttpRequest> _requests = new();

	protected override async Task OnInitializedAsync()
	{
		var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
		var queryStrings = QueryHelpers.ParseQuery(uri.Query);
		if (queryStrings.TryGetValue("bucket", out StringValues bucket))
		{
			_bucket = bucket.ToString();
		}
		else
		{
			_bucket = await LocalStorage.GetItemAsync<string>(Key);
			if (string.IsNullOrWhiteSpace(_bucket))
			{
				_bucket = Guid.NewGuid().ToString("N");
				await LocalStorage.SetItemAsync(Key, _bucket);
			}
		}

		_ = Wss.ConnectAsync(new Uri($"wss://wss.dotnethelp.co.uk?bucket={_bucket}"), _disposalTokenSource.Token)
		.ContinueWith((c) =>
		{
			Wss.OnMessage += OnMessage;
			StateHasChanged();
		});

		_ = GetList();
	}

	private void OnMessage(object? sender, WebSocketMessage? message)
	{
		if (message?.Action == "HTTP_REQUEST")
		{
			_ = GetList();
		}
	}

	private async Task GetList()
	{
		long from = _requests.Count == 0 ? 0 : _requests.Max(x => x.Created).ToUnixTimeSeconds();
		_requests.AddRange(await ApiClient.GetHttpRequests(_bucket, from, _disposalTokenSource.Token));
		_loading = false;
		StateHasChanged();
	}

	public async ValueTask DisposeAsync()
	{
		Wss.OnMessage -= OnMessage;
		await _disposalTokenSource.CancelAsync();
		await Wss.DisposeAsync();
	}
}