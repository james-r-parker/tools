@page "/jwt/decode"
@using DotnetHelp.DevTools.Shared
@inject ApiHttpClient Http
@implements IAsyncDisposable

<PageTitle>JWT</PageTitle>

<DnhHeader Title="JWT"
		   SubTitle="JWT Decoding"
		   Details=@(new List<string> {
		   $"Decode a JWT into collection of claims and try and validate the JWT signature"
		   }) />

<DnhSection>
	<DnhForm OnSubmit="OnSubmit" Text="Decode">
		<DnhTextArea Label="JWT" @bind-Value="_request" />
		<DnhTextBox Label="Secret" @bind-Value="_secret" />
		<DnhTextBox Label="JWKs Uri" @bind-Value="_jwks" />
	</DnhForm>
</DnhSection>


@if (_loading)
{
	<DnhLoading />
}
else if (_response is not null)
{
	<DnhSection>
		<DnhResult>
			<DnhKvp Name="Issuer" Value="@_response.Issuer" />
			<DnhKvp Name="Valid From" Value="@_response.ValidFrom" />
			<DnhKvp Name="Valid To" Value="@_response.ValidTo" />
			<DnhTitle>Claims</DnhTitle>
			<DnhKvpCollection Items="@_response.Claims" />
		</DnhResult>
	</DnhSection>
}

@code {
	private string? _request;
	private string? _secret;
	private string? _jwks;
	private bool _loading;
	private JwtApiResponse? _response;
	private readonly CancellationTokenSource _disposalTokenSource = new();

	public async ValueTask DisposeAsync()
	{
		await _disposalTokenSource.CancelAsync();
	}

	private async Task OnSubmit()
	{
		_response = null;
		if (!string.IsNullOrWhiteSpace(_request))
		{
			try
			{
				_loading = true;
				_response = await Http.JwtDecode(new JwtApiRequest(_request, _secret, _jwks), _disposalTokenSource.Token);
				StateHasChanged();
			}
			catch
			{
			}
			finally
			{
				_loading = false;
			}
		}
	}
}