@page "/jwt/decode"
@using DotnetHelp.DevTools.Shared
@inject ApiHttpClient Http
@implements IAsyncDisposable

<PageTitle>JWT</PageTitle>

<PageHeader Title="JWT"
			SubTitle="JWT Decoding"
			Details=@(new List<string> {
			$"Decode a JWT into collection of claims and try and validate the JWT signature"
			}) />

<section class="mb-8 relative">

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">JWT</span>
		<InputTextArea @bind-Value="_request" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" rows="15" placeholder="Enter some text."></InputTextArea>
	</label>

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">Secret</span>
		<InputText @bind-Value="_secret" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" placeholder="Enter some text."></InputText>
	</label>

	<label class="block mb-4">
		<span class="block text-gray-700 dark:text-gray-400 mb-2">JWKs Uri</span>
		<InputText @bind-Value="_jwks" class="w-full text-sm leading-6 text-slate-400 rounded-md ring-1 ring-slate-900/10 shadow-sm py-1.5 pl-2 pr-3 hover:ring-slate-300 dark:bg-slate-800 dark:highlight-white/5 dark:hover:bg-slate-700" placeholder="Enter some text."></InputText>
	</label>

	<div class="flex justify-end">
		<div>
			<button @onclick="OnClick" type="button" class="bg-sky-500 hover:bg-sky-700 px-5 py-2 text-sm leading-5 rounded-full font-semibold text-white">
				Decode
			</button>
		</div>
	</div>


</section>

@if (_loading)
{
	<section class="mb-2">
		<Loading />
	</section>
}
else if (_response is not null)
{
	<section class="mb-8 relative">

		<span class="block text-gray-700 dark:text-gray-400 mb-2">Result</span>

		<div class="not-prose relative bg-slate-50 rounded-xl overflow-hidden dark:bg-slate-800/25">
			<div style="background-position:10px 10px" class="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,#fff,rgba(255,255,255,0.6))] dark:bg-grid-slate-700/25 dark:[mask-image:linear-gradient(0deg,rgba(255,255,255,0.1),rgba(255,255,255,0.5))]"></div><div class="relative rounded-xl overflow-auto p-8">
				<div class="space-y-8">
					<div>
						<div class="text-sm font-medium text-slate-900 dark:text-slate-200">

							<p>
								<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">Issuer : </span>
								<span>@_response.Issuer</span>
							</p>

							<p>
								<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">Valid From : </span>
								<span>@_response.ValidFrom</span>
							</p>

							<p>
								<span class="text-sky-500 whitespace-nowrap dark:text-sky-400">Valid To : </span>
								<span>@_response.ValidTo</span>
							</p>

							<p class="text-xl mt-3">Claims</p>
							@foreach (var claim in _response.Claims)
							{
								<ul>
									<li>
										<span>
											<span class="text-sm text-sky-500 whitespace-nowrap dark:text-sky-400">@claim.Key : </span>
											<span class="text-wrap break-all text-sm">@claim.Value</span>
										</span>
									</li>
								</ul>
							}
						</div>
					</div>
				</div>
			</div><div class="absolute inset-0 pointer-events-none border border-black/5 rounded-xl dark:border-white/5"></div>
		</div>

	</section>
}


@code {
	private string? _request;
	private string? _secret;
	private string? _jwks;
	private bool _loading;
	private JwtApiResponse? _response;
	readonly CancellationTokenSource _disposalTokenSource = new();

	protected override Task OnInitializedAsync()
	{
		return Task.CompletedTask;
	}

	public async ValueTask DisposeAsync()
	{
		await _disposalTokenSource.CancelAsync();
	}

	private async Task OnClick()
	{
		if (!string.IsNullOrWhiteSpace(_request))
		{
			try
			{
				_loading = true;
				_response = await Http.JwtDecode(new JwtApiRequest(_request, _secret, _jwks), _disposalTokenSource.Token);
				StateHasChanged();
			}
			catch
			{
				_response = null;
			}
			finally
			{
				_loading = false;
			}
			
		}
	}
}